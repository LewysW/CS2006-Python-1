# Easy 1

>>> mulEqualToOne(5)
['<1:2>']
>>> mulEqualToOne(10)
['<1:2>', '<2:7>', '<3:7>']
>>> mulEqualToOne(15)
['<1:2>', '<2:7>', '<3:7>', '<3:14>', '<9:14>']
>>> mulEqualToOne(20)
['<1:2>', '<2:7>', '<3:7>', '<3:14>', '<9:14>', '<5:17>', '<10:17>']

# Easy 2

>>> isCommutativeAdd(0)
True
>>> isCommutativeAdd(1)
<0:1> <0:1>
True
>>> isCommutativeAdd(3)
<0:3> <0:3>
<0:3> <1:3>
<0:3> <2:3>
<1:3> <1:3>
<1:3> <2:3>
<2:3> <2:3>
True
>>> isCommutativeAdd(10)
...
True

>>> isCommutativeMul(0)
True
>>> isCommutativeMul(1)
<0:1> <0:1>
True
>>> isCommutativeMul(3)
<0:3> <0:3>
<0:3> <1:3>
<0:3> <2:3>
<1:3> <1:3>
<1:3> <2:3>
<2:3> <2:3>
True
>>> isCommutativeMul(10)
...
True

>>> isAssociativeAdd(0)
True
>>> isAssociativeAdd(1)
<0:1> <0:1> <0:1>
True
>>> isAssociativeAdd(3)
<0:3> <0:3> <0:3>
<0:3> <0:3> <1:3>
<0:3> <0:3> <2:3>
<0:3> <1:3> <0:3>
<0:3> <1:3> <1:3>
<0:3> <1:3> <2:3>
<0:3> <2:3> <0:3>
<0:3> <2:3> <1:3>
<0:3> <2:3> <2:3>
<1:3> <0:3> <0:3>
<1:3> <0:3> <1:3>
<1:3> <0:3> <2:3>
<1:3> <1:3> <0:3>
<1:3> <1:3> <1:3>
<1:3> <1:3> <2:3>
<1:3> <2:3> <0:3>
<1:3> <2:3> <1:3>
<1:3> <2:3> <2:3>
<2:3> <0:3> <0:3>
<2:3> <0:3> <1:3>
<2:3> <0:3> <2:3>
<2:3> <1:3> <0:3>
<2:3> <1:3> <1:3>
<2:3> <1:3> <2:3>
<2:3> <2:3> <0:3>
<2:3> <2:3> <1:3>
<2:3> <2:3> <2:3>
True
>>> isAssociativeAdd(10)
True

>>> isAssociativeMul(0)
True
>>> isAssociativeMul(1)
<0:1> <0:1> <0:1>
True
>>> isAssociativeMul(3)
<0:3> <0:3> <0:3>
<0:3> <0:3> <1:3>
<0:3> <0:3> <2:3>
<0:3> <1:3> <0:3>
<0:3> <1:3> <1:3>
<0:3> <1:3> <2:3>
<0:3> <2:3> <0:3>
<0:3> <2:3> <1:3>
<0:3> <2:3> <2:3>
<1:3> <0:3> <0:3>
<1:3> <0:3> <1:3>
<1:3> <0:3> <2:3>
<1:3> <1:3> <0:3>
<1:3> <1:3> <1:3>
<1:3> <1:3> <2:3>
<1:3> <2:3> <0:3>
<1:3> <2:3> <1:3>
<1:3> <2:3> <2:3>
<2:3> <0:3> <0:3>
<2:3> <0:3> <1:3>
<2:3> <0:3> <2:3>
<2:3> <1:3> <0:3>
<2:3> <1:3> <1:3>
<2:3> <1:3> <2:3>
<2:3> <2:3> <0:3>
<2:3> <2:3> <1:3>
<2:3> <2:3> <2:3>
True
>>> isAssociativeMul(10)
True

>>> isDistributive(0)
True
>>> isDistributive(1)
<0:1> <0:1> <0:1>
True
>>> isDistributive(3)
<0:3> <0:3> <0:3>
<0:3> <0:3> <1:3>
False
>>> isDistributive(10)
<0:10> <0:10> <0:10>
<0:10> <0:10> <1:10>
False

# Medium 1

>>> findValAdd(0)
[]
>>> findValAdd(1)
['<0:1>']
>>> findValAdd(5)
['<0:5>']
>>> findValAdd(10)
['<0:10>']

# Medium 2

>>> findValMul(0)
[]
>>> findValMul(1)
['<0:1>']
>>> findValMul(5)
['<0:5>']
>>> findValMul(10)
['<0:10>']

# Hard 1
implement an algorithm that takes a list M of matrices
and calculates all possible matrices that may be obtained
by multiplying them together

>>> ax = TwistedIntMatrix(2, 2, [a, a, a, a])
>>> bx = TwistedIntMatrix(2, 2, [b, b, b, b])
>>> cx = TwistedIntMatrix(2, 2, [a, b, c, d])
>>> dx = TwistedIntMatrix(2, 2, [d, d, a, a])
>>> list = [ax, bx, cx, dx]
>>> xx = getPossibleMatrices(list)
>>> for x in xx:
...     print(x)
... 
<4:5> <1:5> 
<4:5> <1:5> 
,
<0:5> <4:5> 
<0:5> <4:5> 
,
<3:5> <3:5> 
<3:5> <3:5> 
,
<4:5> <1:5> 
<4:5> <1:5> 
,
<3:5> <3:5> 
<3:5> <3:5> 
,
<2:5> <0:5> 
<2:5> <0:5> 
,
<4:5> <4:5> 
<4:5> <4:5> 
,
<4:5> <4:5> 
<0:5> <0:5> 
,
<0:5> <0:5> 
<1:5> <1:5> 
,
<3:5> <3:5> 
<4:5> <4:5> 
,
<1:5> <1:5> 
<2:5> <2:5> 
,
<2:5> <2:5> 
<3:5> <3:5> 
,
<4:5> <4:5> 
<0:5> <0:5> 
,
<1:5> <2:5> 
<4:5> <1:5> 
,
<0:5> <0:5> 
<1:5> <1:5> 
,
<3:5> <3:5> 
<1:5> <2:5> 
,
<1:5> <1:5> 
<2:5> <2:5> 
,
<3:5> <3:5> 
<4:5> <4:5> 
,
<0:5> <0:5> 
<1:5> <1:5> 
,
